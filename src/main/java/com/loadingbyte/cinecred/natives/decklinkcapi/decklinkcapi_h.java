// Generated by jextract

package com.loadingbyte.cinecred.natives.decklinkcapi;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class decklinkcapi_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static MethodHandle PixelFormat_8BitBGRA$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$7,"PixelFormat_8BitBGRA");
    }
    /**
     * {@snippet :
     * int PixelFormat_8BitBGRA();
     * }
     */
    public static int PixelFormat_8BitBGRA() {
        var mh$ = PixelFormat_8BitBGRA$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PixelFormat_10BitRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$8,"PixelFormat_10BitRGB");
    }
    /**
     * {@snippet :
     * int PixelFormat_10BitRGB();
     * }
     */
    public static int PixelFormat_10BitRGB() {
        var mh$ = PixelFormat_10BitRGB$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FieldDominance_LowerFieldFirst$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$9,"FieldDominance_LowerFieldFirst");
    }
    /**
     * {@snippet :
     * int FieldDominance_LowerFieldFirst();
     * }
     */
    public static int FieldDominance_LowerFieldFirst() {
        var mh$ = FieldDominance_LowerFieldFirst$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FieldDominance_UpperFieldFirst$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$10,"FieldDominance_UpperFieldFirst");
    }
    /**
     * {@snippet :
     * int FieldDominance_UpperFieldFirst();
     * }
     */
    public static int FieldDominance_UpperFieldFirst() {
        var mh$ = FieldDominance_UpperFieldFirst$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FieldDominance_ProgressiveFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$11,"FieldDominance_ProgressiveFrame");
    }
    /**
     * {@snippet :
     * int FieldDominance_ProgressiveFrame();
     * }
     */
    public static int FieldDominance_ProgressiveFrame() {
        var mh$ = FieldDominance_ProgressiveFrame$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FieldDominance_ProgressiveSegmentedFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$12,"FieldDominance_ProgressiveSegmentedFrame");
    }
    /**
     * {@snippet :
     * int FieldDominance_ProgressiveSegmentedFrame();
     * }
     */
    public static int FieldDominance_ProgressiveSegmentedFrame() {
        var mh$ = FieldDominance_ProgressiveSegmentedFrame$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayModeFlag_ColorspaceRec601$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$13,"DisplayModeFlag_ColorspaceRec601");
    }
    /**
     * {@snippet :
     * int DisplayModeFlag_ColorspaceRec601();
     * }
     */
    public static int DisplayModeFlag_ColorspaceRec601() {
        var mh$ = DisplayModeFlag_ColorspaceRec601$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayModeFlag_ColorspaceRec709$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$14,"DisplayModeFlag_ColorspaceRec709");
    }
    /**
     * {@snippet :
     * int DisplayModeFlag_ColorspaceRec709();
     * }
     */
    public static int DisplayModeFlag_ColorspaceRec709() {
        var mh$ = DisplayModeFlag_ColorspaceRec709$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayModeFlag_ColorspaceRec2020$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$15,"DisplayModeFlag_ColorspaceRec2020");
    }
    /**
     * {@snippet :
     * int DisplayModeFlag_ColorspaceRec2020();
     * }
     */
    public static int DisplayModeFlag_ColorspaceRec2020() {
        var mh$ = DisplayModeFlag_ColorspaceRec2020$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Colorspace_Rec601$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$16,"Colorspace_Rec601");
    }
    /**
     * {@snippet :
     * int Colorspace_Rec601();
     * }
     */
    public static int Colorspace_Rec601() {
        var mh$ = Colorspace_Rec601$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Colorspace_Rec709$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$17,"Colorspace_Rec709");
    }
    /**
     * {@snippet :
     * int Colorspace_Rec709();
     * }
     */
    public static int Colorspace_Rec709() {
        var mh$ = Colorspace_Rec709$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Colorspace_Rec2020$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$18,"Colorspace_Rec2020");
    }
    /**
     * {@snippet :
     * int Colorspace_Rec2020();
     * }
     */
    public static int Colorspace_Rec2020() {
        var mh$ = Colorspace_Rec2020$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initDeckLinkAPI$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$20,"initDeckLinkAPI");
    }
    /**
     * {@snippet :
     * _Bool initDeckLinkAPI();
     * }
     */
    public static boolean initDeckLinkAPI() {
        var mh$ = initDeckLinkAPI$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDeviceNotificationCallback_Create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$22,"IDeckLinkDeviceNotificationCallback_Create");
    }
    /**
     * {@snippet :
     * IDeckLinkDeviceNotificationCallback* IDeckLinkDeviceNotificationCallback_Create(deviceNotificationCallback_t arrivedCallback, deviceNotificationCallback_t removedCallback);
     * }
     */
    public static MemorySegment IDeckLinkDeviceNotificationCallback_Create(MemorySegment arrivedCallback, MemorySegment removedCallback) {
        var mh$ = IDeckLinkDeviceNotificationCallback_Create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(arrivedCallback, removedCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkVideoOutputCallback_Create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$24,"IDeckLinkVideoOutputCallback_Create");
    }
    /**
     * {@snippet :
     * IDeckLinkVideoOutputCallback* IDeckLinkVideoOutputCallback_Create(scheduledFrameCompletionCallback_t callback);
     * }
     */
    public static MemorySegment IDeckLinkVideoOutputCallback_Create(MemorySegment callback) {
        var mh$ = IDeckLinkVideoOutputCallback_Create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkVideoBuffer_Create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$25,"IDeckLinkVideoBuffer_Create");
    }
    /**
     * {@snippet :
     * IDeckLinkVideoBuffer* IDeckLinkVideoBuffer_Create(void* bytes);
     * }
     */
    public static MemorySegment IDeckLinkVideoBuffer_Create(MemorySegment bytes) {
        var mh$ = IDeckLinkVideoBuffer_Create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IUnknown_AddRef$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$26,"IUnknown_AddRef");
    }
    /**
     * {@snippet :
     * void IUnknown_AddRef(IUnknown* object);
     * }
     */
    public static void IUnknown_AddRef(MemorySegment object) {
        var mh$ = IUnknown_AddRef$MH();
        try {
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IUnknown_Release$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$27,"IUnknown_Release");
    }
    /**
     * {@snippet :
     * void IUnknown_Release(IUnknown* object);
     * }
     */
    public static void IUnknown_Release(MemorySegment object) {
        var mh$ = IUnknown_Release$MH();
        try {
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDiscovery_Create$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$29,"IDeckLinkDiscovery_Create");
    }
    /**
     * {@snippet :
     * IDeckLinkDiscovery* IDeckLinkDiscovery_Create();
     * }
     */
    public static MemorySegment IDeckLinkDiscovery_Create() {
        var mh$ = IDeckLinkDiscovery_Create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDiscovery_InstallDeviceNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$31,"IDeckLinkDiscovery_InstallDeviceNotifications");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkDiscovery_InstallDeviceNotifications(IDeckLinkDiscovery* discovery, IDeckLinkDeviceNotificationCallback* callback);
     * }
     */
    public static boolean IDeckLinkDiscovery_InstallDeviceNotifications(MemorySegment discovery, MemorySegment callback) {
        var mh$ = IDeckLinkDiscovery_InstallDeviceNotifications$MH();
        try {
            return (boolean)mh$.invokeExact(discovery, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLink_GetDisplayName$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$33,"IDeckLink_GetDisplayName");
    }
    /**
     * {@snippet :
     * _Bool IDeckLink_GetDisplayName(IDeckLink* deckLink, char* str, long long len);
     * }
     */
    public static boolean IDeckLink_GetDisplayName(MemorySegment deckLink, MemorySegment str, long len) {
        var mh$ = IDeckLink_GetDisplayName$MH();
        try {
            return (boolean)mh$.invokeExact(deckLink, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLink_QueryIDeckLinkProfileAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$34,"IDeckLink_QueryIDeckLinkProfileAttributes");
    }
    /**
     * {@snippet :
     * IDeckLinkProfileAttributes* IDeckLink_QueryIDeckLinkProfileAttributes(IDeckLink* deckLink);
     * }
     */
    public static MemorySegment IDeckLink_QueryIDeckLinkProfileAttributes(MemorySegment deckLink) {
        var mh$ = IDeckLink_QueryIDeckLinkProfileAttributes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(deckLink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLink_QueryIDeckLinkOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$35,"IDeckLink_QueryIDeckLinkOutput");
    }
    /**
     * {@snippet :
     * IDeckLinkOutput* IDeckLink_QueryIDeckLinkOutput(IDeckLink* deckLink);
     * }
     */
    public static MemorySegment IDeckLink_QueryIDeckLinkOutput(MemorySegment deckLink) {
        var mh$ = IDeckLink_QueryIDeckLinkOutput$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(deckLink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkProfileAttributes_GetDeviceHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$36,"IDeckLinkProfileAttributes_GetDeviceHandle");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkProfileAttributes_GetDeviceHandle(IDeckLinkProfileAttributes* attributes, char* str, long long len);
     * }
     */
    public static boolean IDeckLinkProfileAttributes_GetDeviceHandle(MemorySegment attributes, MemorySegment str, long len) {
        var mh$ = IDeckLinkProfileAttributes_GetDeviceHandle$MH();
        try {
            return (boolean)mh$.invokeExact(attributes, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkProfileAttributes_IsActive$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$38,"IDeckLinkProfileAttributes_IsActive");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkProfileAttributes_IsActive(IDeckLinkProfileAttributes* attributes);
     * }
     */
    public static boolean IDeckLinkProfileAttributes_IsActive(MemorySegment attributes) {
        var mh$ = IDeckLinkProfileAttributes_IsActive$MH();
        try {
            return (boolean)mh$.invokeExact(attributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkProfileAttributes_SupportsPlayback$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$39,"IDeckLinkProfileAttributes_SupportsPlayback");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkProfileAttributes_SupportsPlayback(IDeckLinkProfileAttributes* attributes);
     * }
     */
    public static boolean IDeckLinkProfileAttributes_SupportsPlayback(MemorySegment attributes) {
        var mh$ = IDeckLinkProfileAttributes_SupportsPlayback$MH();
        try {
            return (boolean)mh$.invokeExact(attributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_GetDisplayModeIterator$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$40,"IDeckLinkOutput_GetDisplayModeIterator");
    }
    /**
     * {@snippet :
     * IDeckLinkDisplayModeIterator* IDeckLinkOutput_GetDisplayModeIterator(IDeckLinkOutput* output);
     * }
     */
    public static MemorySegment IDeckLinkOutput_GetDisplayModeIterator(MemorySegment output) {
        var mh$ = IDeckLinkOutput_GetDisplayModeIterator$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_DoesSupportVideoMode$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$42,"IDeckLinkOutput_DoesSupportVideoMode");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_DoesSupportVideoMode(IDeckLinkOutput* output, int mode, int pixelFormat);
     * }
     */
    public static boolean IDeckLinkOutput_DoesSupportVideoMode(MemorySegment output, int mode, int pixelFormat) {
        var mh$ = IDeckLinkOutput_DoesSupportVideoMode$MH();
        try {
            return (boolean)mh$.invokeExact(output, mode, pixelFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_EnableVideoOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$44,"IDeckLinkOutput_EnableVideoOutput");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_EnableVideoOutput(IDeckLinkOutput* output, int mode);
     * }
     */
    public static boolean IDeckLinkOutput_EnableVideoOutput(MemorySegment output, int mode) {
        var mh$ = IDeckLinkOutput_EnableVideoOutput$MH();
        try {
            return (boolean)mh$.invokeExact(output, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_DisableVideoOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$45,"IDeckLinkOutput_DisableVideoOutput");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_DisableVideoOutput(IDeckLinkOutput* output);
     * }
     */
    public static boolean IDeckLinkOutput_DisableVideoOutput(MemorySegment output) {
        var mh$ = IDeckLinkOutput_DisableVideoOutput$MH();
        try {
            return (boolean)mh$.invokeExact(output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_StartScheduledPlayback$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$47,"IDeckLinkOutput_StartScheduledPlayback");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_StartScheduledPlayback(IDeckLinkOutput* output, long long startTime, long long timeScale, double speed);
     * }
     */
    public static boolean IDeckLinkOutput_StartScheduledPlayback(MemorySegment output, long startTime, long timeScale, double speed) {
        var mh$ = IDeckLinkOutput_StartScheduledPlayback$MH();
        try {
            return (boolean)mh$.invokeExact(output, startTime, timeScale, speed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_StopScheduledPlayback$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$49,"IDeckLinkOutput_StopScheduledPlayback");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_StopScheduledPlayback(IDeckLinkOutput* output, long long stopTime, long long timeScale);
     * }
     */
    public static boolean IDeckLinkOutput_StopScheduledPlayback(MemorySegment output, long stopTime, long timeScale) {
        var mh$ = IDeckLinkOutput_StopScheduledPlayback$MH();
        try {
            return (boolean)mh$.invokeExact(output, stopTime, timeScale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_SetScheduledFrameCompletionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$50,"IDeckLinkOutput_SetScheduledFrameCompletionCallback");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_SetScheduledFrameCompletionCallback(IDeckLinkOutput* output, IDeckLinkVideoOutputCallback* callback);
     * }
     */
    public static boolean IDeckLinkOutput_SetScheduledFrameCompletionCallback(MemorySegment output, MemorySegment callback) {
        var mh$ = IDeckLinkOutput_SetScheduledFrameCompletionCallback$MH();
        try {
            return (boolean)mh$.invokeExact(output, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_CreateVideoFrameWithBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$52,"IDeckLinkOutput_CreateVideoFrameWithBuffer");
    }
    /**
     * {@snippet :
     * IDeckLinkVideoFrame* IDeckLinkOutput_CreateVideoFrameWithBuffer(IDeckLinkOutput* output, int width, int height, int rowBytes, int pixelFormat, IDeckLinkVideoBuffer* buffer);
     * }
     */
    public static MemorySegment IDeckLinkOutput_CreateVideoFrameWithBuffer(MemorySegment output, int width, int height, int rowBytes, int pixelFormat, MemorySegment buffer) {
        var mh$ = IDeckLinkOutput_CreateVideoFrameWithBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(output, width, height, rowBytes, pixelFormat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_DisplayVideoFrameSync$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$53,"IDeckLinkOutput_DisplayVideoFrameSync");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_DisplayVideoFrameSync(IDeckLinkOutput* output, IDeckLinkVideoFrame* frame);
     * }
     */
    public static boolean IDeckLinkOutput_DisplayVideoFrameSync(MemorySegment output, MemorySegment frame) {
        var mh$ = IDeckLinkOutput_DisplayVideoFrameSync$MH();
        try {
            return (boolean)mh$.invokeExact(output, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkOutput_ScheduleVideoFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$55,"IDeckLinkOutput_ScheduleVideoFrame");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkOutput_ScheduleVideoFrame(IDeckLinkOutput* output, IDeckLinkVideoFrame* frame, long long displayTime, long long displayDuration, long long timeScale);
     * }
     */
    public static boolean IDeckLinkOutput_ScheduleVideoFrame(MemorySegment output, MemorySegment frame, long displayTime, long displayDuration, long timeScale) {
        var mh$ = IDeckLinkOutput_ScheduleVideoFrame$MH();
        try {
            return (boolean)mh$.invokeExact(output, frame, displayTime, displayDuration, timeScale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayModeIterator_Next$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$56,"IDeckLinkDisplayModeIterator_Next");
    }
    /**
     * {@snippet :
     * IDeckLinkDisplayMode* IDeckLinkDisplayModeIterator_Next(IDeckLinkDisplayModeIterator* iterator);
     * }
     */
    public static MemorySegment IDeckLinkDisplayModeIterator_Next(MemorySegment iterator) {
        var mh$ = IDeckLinkDisplayModeIterator_Next$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iterator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetName$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$57,"IDeckLinkDisplayMode_GetName");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkDisplayMode_GetName(IDeckLinkDisplayMode* mode, char* str, long long len);
     * }
     */
    public static boolean IDeckLinkDisplayMode_GetName(MemorySegment mode, MemorySegment str, long len) {
        var mh$ = IDeckLinkDisplayMode_GetName$MH();
        try {
            return (boolean)mh$.invokeExact(mode, str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$59,"IDeckLinkDisplayMode_GetDisplayMode");
    }
    /**
     * {@snippet :
     * int IDeckLinkDisplayMode_GetDisplayMode(IDeckLinkDisplayMode* mode);
     * }
     */
    public static int IDeckLinkDisplayMode_GetDisplayMode(MemorySegment mode) {
        var mh$ = IDeckLinkDisplayMode_GetDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$60,"IDeckLinkDisplayMode_GetWidth");
    }
    /**
     * {@snippet :
     * int IDeckLinkDisplayMode_GetWidth(IDeckLinkDisplayMode* mode);
     * }
     */
    public static int IDeckLinkDisplayMode_GetWidth(MemorySegment mode) {
        var mh$ = IDeckLinkDisplayMode_GetWidth$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$61,"IDeckLinkDisplayMode_GetHeight");
    }
    /**
     * {@snippet :
     * int IDeckLinkDisplayMode_GetHeight(IDeckLinkDisplayMode* mode);
     * }
     */
    public static int IDeckLinkDisplayMode_GetHeight(MemorySegment mode) {
        var mh$ = IDeckLinkDisplayMode_GetHeight$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetFrameRate$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$63,"IDeckLinkDisplayMode_GetFrameRate");
    }
    /**
     * {@snippet :
     * long long IDeckLinkDisplayMode_GetFrameRate(IDeckLinkDisplayMode* mode);
     * }
     */
    public static long IDeckLinkDisplayMode_GetFrameRate(MemorySegment mode) {
        var mh$ = IDeckLinkDisplayMode_GetFrameRate$MH();
        try {
            return (long)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetFieldDominance$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$64,"IDeckLinkDisplayMode_GetFieldDominance");
    }
    /**
     * {@snippet :
     * int IDeckLinkDisplayMode_GetFieldDominance(IDeckLinkDisplayMode* mode);
     * }
     */
    public static int IDeckLinkDisplayMode_GetFieldDominance(MemorySegment mode) {
        var mh$ = IDeckLinkDisplayMode_GetFieldDominance$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkDisplayMode_GetFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$65,"IDeckLinkDisplayMode_GetFlags");
    }
    /**
     * {@snippet :
     * int IDeckLinkDisplayMode_GetFlags(IDeckLinkDisplayMode* mode);
     * }
     */
    public static int IDeckLinkDisplayMode_GetFlags(MemorySegment mode) {
        var mh$ = IDeckLinkDisplayMode_GetFlags$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IDeckLinkVideoFrame_SetMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$67,"IDeckLinkVideoFrame_SetMetadata");
    }
    /**
     * {@snippet :
     * _Bool IDeckLinkVideoFrame_SetMetadata(IDeckLinkVideoFrame* frame, int eotf, double rx, double ry, double gx, double gy, double bx, double by, double wx, double wy, double maxDML, double minDML, double maxCLL, double maxFALL, int cs);
     * }
     */
    public static boolean IDeckLinkVideoFrame_SetMetadata(MemorySegment frame, int eotf, double rx, double ry, double gx, double gy, double bx, double by, double wx, double wy, double maxDML, double minDML, double maxCLL, double maxFALL, int cs) {
        var mh$ = IDeckLinkVideoFrame_SetMetadata$MH();
        try {
            return (boolean)mh$.invokeExact(frame, eotf, rx, ry, gx, gy, bx, by, wx, wy, maxDML, minDML, maxCLL, maxFALL, cs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


